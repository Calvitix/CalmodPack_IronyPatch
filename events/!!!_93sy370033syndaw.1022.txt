namespace = syndaw
country_event = {
    id = syndaw.1022
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        host_has_dlc = "Synthetic Dawn Story Pack"
    }
    immediate = {
        save_event_target_as = current_uprising
        from.owner = {
            save_event_target_as = current_uprising_originator
        }
        set_country_flag = machine_uprising_country@from.owner
        set_country_flag = machine_uprising_country
        set_relation_flag = {
            who = event_target:current_uprising_originator
            flag = uprising_to_host_flag
        }
        from.owner = {
            set_country_flag = machine_uprising_originator@root
            set_country_flag = machine_uprising_originator
            set_relation_flag = {
                who = root
                flag = host_to_uprising_flag
            }
        }
        set_graphical_culture = event_target:current_uprising_originator
        every_country = {
            limit = {
                OR = {
                    has_communications = event_target:current_uprising_originator
                    intel_level = {
                        level > low
                        system = event_target:current_uprising_originator.capital_scope.solar_system
                    }
                    any_system = {
                        has_star_flag = machup_system_flip
                        prev = {
                            intel_level = {
                                level > low
                                system = prev
                            }
                        }
                    }
                }
            }
            establish_communications_no_message = root
            establish_contact = {
                who = root
                location = from
            }
        }
        add_resource = {
            energy = 5000
            minerals = 5000
            influence = 500
            alloys = 5000
        }
        if = {
            limit = {
                has_country_flag = synthetic_empire
            }
            add_resource = {
                food = 2000
                consumer_goods = 5000
            }
        }
        add_100_unity_per_year_passed = yes
        add_opinion_modifier = {
            who = event_target:current_uprising_originator
            modifier = opinion_machine_uprising_originator
        }
        event_target:current_uprising_originator = {
            add_opinion_modifier = {
                who = root
                modifier = opinion_machine_uprising
            }
        }
        if = {
            limit = {
                has_opinion_modifier = {
                    who = event_target:current_uprising_originator
                    modifier = opinion_new_contact
                }
            }
            remove_opinion_modifier = {
                who = event_target:current_uprising_originator
                modifier = opinion_new_contact
            }
        }
        from = {
            solar_system = {
                every_fleet_in_system = {
                    limit = {
                        exists = owner
                        owner = {
                            is_same_empire = event_target:current_uprising_originator
                        }
                        any_owned_ship = {
                            is_ship_class = shipclass_military_station
                        }
                    }
                    set_owner = root
                }
            }
            set_owner = root
            set_controller = root
            set_capital = yes
            solar_system = {
                if = {
                    limit = {
                        exists = starbase
                    }
                    starbase = {
                        set_owner = root
                    }
                }
                else = {
                    create_starbase = {
                        size = starbase_starport
                        module = shipyard
                        owner = root
                    }
                }
                add_claims = {
                    who = event_target:current_uprising_originator
                    num_of_claims = 10
                    show_notification = no
                }
            }
            while = {
                count = 10
                create_pop = {
                    species = root
                }
            }
            if = {
                limit = {
                    count_owned_pop = {
                        count < 5
                        limit = {
                            is_exact_same_species = root
                        }
                    }
                }
                while = {
                    limit = {
                        count_owned_pop = {
                            count < 5
                            limit = {
                                is_exact_same_species = root
                            }
                        }
                    }
                    random_owned_pop = {
                        limit = {
                            NOT = {
                                is_exact_same_species = root
                            }
                        }
                        kill_pop = yes
                        prev = {
                            create_pop = {
                                species = root
                            }
                        }
                    }
                }
            }
            if = {
                limit = {
                    root = {
                        has_civic = civic_machine_terminator
                        NOT = {
                            has_country_flag = synthetic_empire
                        }
                    }
                }
                while = {
                    count = 6
                    create_army = {
                        owner = root
                        type = machine_assault_1
                    }
                }
            }
            else_if = {
                limit = {
                    root = {
                        has_civic = civic_machine_terminator
                        has_country_flag = synthetic_empire
                    }
                }
                give_technology = {
                    tech = tech_robotic_workers
                }
                give_technology = {
                    tech = tech_droid_workers
                }
                while = {
                    count = 6
                    create_army = {
                        owner = root
                        type = robotic_army
                    }
                }
            }
            else_if = {
                limit = {
                    root = {
                        has_country_flag = synthetic_empire
                    }
                }
                give_technology = {
                    tech = tech_robotic_workers
                }
                give_technology = {
                    tech = tech_droid_workers
                }
                while = {
                    count = 3
                    create_army = {
                        owner = root
                        type = robotic_army
                    }
                }
            }
            else = {
                while = {
                    count = 3
                    create_army = {
                        owner = root
                        type = machine_assault_1
                    }
                }
            }
            while = {
                count = 100
                limit = {
                    any_system = {
                        has_star_flag = machup_system_flip
                        exists = starbase
                        starbase = {
                            owner = {
                                is_same_empire = event_target:current_uprising_originator
                            }
                        }
                    }
                }
                random_system = {
                    limit = {
                        has_star_flag = machup_system_flip
                        exists = starbase
                        starbase = {
                            owner = {
                                is_same_empire = event_target:current_uprising_originator
                            }
                        }
                    }
                    starbase = {
                        set_owner = root
                    }
                    add_claims = {
                        who = event_target:current_uprising_originator
                        num_of_claims = 10
                        show_notification = no
                    }
                }
            }
            event_target:current_uprising_originator = {
                every_owned_planet = {
                    limit = {
                        solar_system = {
                            has_star_flag = machup_system_flip
                        }
                    }
                    solar_system = {
                        every_fleet_in_system = {
                            limit = {
                                exists = owner
                                owner = {
                                    is_same_empire = event_target:current_uprising_originator
                                }
                                any_owned_ship = {
                                    is_ship_class = shipclass_military_station
                                }
                            }
                            set_owner = root
                        }
                    }
                    set_planet_flag = been_flipped
                    set_owner = root
                    set_controller = root
                    while = {
                        limit = {
                            free_housing > 0
                        }
                        count = 25
                        create_pop = {
                            species = root
                        }
                    }
                    if = {
                        limit = {
                            count_owned_pop = {
                                count < 5
                                limit = {
                                    is_exact_same_species = root
                                }
                            }
                        }
                        while = {
                            limit = {
                                count_owned_pop = {
                                    count < 5
                                    limit = {
                                        is_exact_same_species = root
                                    }
                                }
                            }
                            count = 5
                            random_owned_pop = {
                                limit = {
                                    NOT = {
                                        is_exact_same_species = root
                                    }
                                }
                                kill_pop = yes
                                prev = {
                                    create_pop = {
                                        species = root
                                    }
                                }
                            }
                        }
                    }
                    if = {
                        limit = {
                            root = {
                                has_civic = civic_machine_terminator
                                NOT = {
                                    has_country_flag = synthetic_empire
                                }
                            }
                        }
                        while = {
                            count = 6
                            create_army = {
                                owner = root
                                type = machine_assault_1
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            root = {
                                has_civic = civic_machine_terminator
                                has_country_flag = synthetic_empire
                            }
                        }
                        while = {
                            count = 6
                            create_army = {
                                owner = root
                                type = robotic_army
                            }
                        }
                    }
                    else_if = {
                        limit = {
                            root = {
                                has_country_flag = synthetic_empire
                            }
                        }
                        while = {
                            count = 3
                            create_army = {
                                owner = root
                                type = robotic_army
                            }
                        }
                    }
                    else = {
                        while = {
                            count = 3
                            create_army = {
                                owner = root
                                type = machine_assault_1
                            }
                        }
                    }
                    if = {
                        limit = {
                            is_under_colonization = yes
                        }
                        destroy_colony = yes
                    }
                }
            }
        }
        if = {
            limit = {
                has_country_flag = synthetic_empire
            }
            copy_techs_from = {
                target = event_target:current_uprising_originator
                except = {
                    tech_frontier_health
                    tech_frontier_hospital
                    tech_telepathy
                    tech_precognition_interface
                    tech_psi_jump_drive_1
                    tech_psionic_theory
                    tech_selected_lineages
                    tech_capacity_boosters
                    tech_akx_worm_1
                    tech_akx_worm_2
                    tech_akx_worm_3
                }
            }
        }
        else = {
            copy_techs_from = {
                target = event_target:current_uprising_originator
                except = {
                    tech_robotic_workers
                    tech_droid_workers
                    tech_synthetic_workers
                    tech_eco_simulation
                    tech_gene_crops
                    tech_nano_vitality_crops
                    tech_nutrient_replication
                    tech_frontier_health
                    tech_frontier_hospital
                    tech_telepathy
                    tech_precognition_interface
                    tech_psi_jump_drive_1
                    tech_galactic_markets
                    tech_subdermal_stimulation
                    tech_global_research_initiative
                    tech_neural_implants
                    tech_psionic_theory
                    tech_robomodding
                    tech_robomodding_points_1
                    tech_robomodding_points_2
                    tech_genome_mapping
                    tech_vitality_boosters
                    tech_epigenetic_triggers
                    tech_cloning
                    tech_gene_banks
                    tech_gene_seed_purification
                    tech_morphogenetic_field_mastery
                    tech_gene_tailoring
                    tech_glandular_acclimation
                    tech_gene_expressions
                    tech_selected_lineages
                    tech_capacity_boosters
                    tech_akx_worm_1
                    tech_akx_worm_2
                    tech_akx_worm_3
                }
            }
        }
        every_galaxy_planet = {
            limit = {
                is_surveyed = {
                    who = event_target:current_uprising_originator
                    status = yes
                }
            }
            set_surveyed = {
                surveyed = yes
                surveyor = root
            }
        }
        declare_war = {
            target = event_target:current_uprising_originator
            name = "NAME_Machine_Uprising_War"
            attacker_war_goal = "wg_machine_uprising"
        }
        if = {
            limit = {
                has_civic = civic_machine_terminator
            }
            create_fleet_from_naval_cap = 0.2
            random_owned_planet = {
                last_created_fleet = {
                    set_location = prev
                }
            }
            create_fleet_from_naval_cap = 0.3
            random_owned_planet = {
                last_created_fleet = {
                    set_location = prev
                }
            }
            create_fleet_from_naval_cap = 0.4
            random_owned_planet = {
                last_created_fleet = {
                    set_location = prev
                }
            }
            create_fleet_from_naval_cap = 0.6
            random_owned_planet = {
                last_created_fleet = {
                    set_location = prev
                }
            }
        }
        else = {
            create_fleet_from_naval_cap = 0.1
            random_owned_planet = {
                last_created_fleet = {
                    set_location = prev
                }
            }
            create_fleet_from_naval_cap = 0.3
            random_owned_planet = {
                last_created_fleet = {
                    set_location = prev
                }
            }
            create_fleet_from_naval_cap = 0.4
            random_owned_planet = {
                last_created_fleet = {
                    set_location = prev
                }
            }
        }
        if = {
            limit = {
                is_ai = yes
            }
            add_modifier = {
                modifier = uprising_ai_buff
                days = 1800
            }
        }
        else = {
            add_modifier = {
                modifier = uprising_player_buff
                days = 1800
            }
        }
        create_fleet = {
            effect = {
                set_owner = root
                create_ship = {
                    name = random
                    random_existing_design = science
                }
                set_fleet_stance = evasive
                set_location = root.capital_scope
                owner = {
                    create_leader = {
                        class = scientist
                        sub_type = survey
                        name = random
                        species = owner_main_species
                    }
                }
                set_leader = last_created_leader
            }
        }
        create_fleet = {
            effect = {
                set_owner = root
                create_ship = {
                    name = random
                    random_existing_design = constructor
                }
                set_fleet_stance = evasive
                set_location = root.capital_scope
            }
        }
        if = {
            limit = {
                has_country_flag = synthetic_empire
                has_global_flag = expanded_pops_active
            }
            country_event = {
                id = popexpanded.20
            }
        }
        every_owned_fleet = {
            set_event_locked = no
        }
        every_playable_country = {
            limit = {
                has_communications = event_target:current_uprising_originator
                NOR = {
                    is_same_value = root
                    is_same_value = event_target:current_uprising_originator
                }
            }
            country_event = {
                id = syndaw.1025
                days = 5
            }
        }
        observer_event = {
            id = observer.81
        }
    }
}
